<?php

namespace App\Http\Actions\ingaz;

use App\Enums\ingaz\NotificationActionEnum;
use App\Http\Actions\MainAction;
use App\Http\Traits\Firebase;
use App\Models\ingaz\Maid;
use App\Models\ingaz\Notification;
use App\Models\ingaz\ReturnRequest;
use App\Models\ingaz\Service;
use Carbon\Carbon;
use Illuminate\Support\Facades\Storage;

class ReturnRequestAction extends MainAction
{
    use Firebase;

    public function __construct(ReturnRequest $model)
    {
        $this->model = $model;
        $this->fileFolder = 'images/return_requests/';
    }

    public function storeRequest($data)
    {
        $notification = Notification::create([
            'user_id' => $data['user_id'],
            'order_id' => $data['order_id'],
            "type" => NotificationActionEnum::OrderStatus->value,
            'title' => [
                'en' => __('notifications.Asus Al Injaz',[],'en'),
                'ar' => __('notifications.Asus Al Injaz',[],'ar'),
            ],
            'description' => [
                'en' => __('notifications.return_request_sent',[],'en') . $data['order_id'],
                'ar' => __('notifications.return_request_sent',[],'ar') . $data['order_id'],
            ],
        ]);
        $send = [
            "type" => $notification->type,
            "order_id" => $notification->order_id,
        ];
        if (isset($data['file'])) {
            $image = $data['file'];
            $data['file'] = uploadFile($image, $this->fileFolder);
        }
        $request =  parent::store($data); // TODO: Change the autogenerated stub
//        unset($request['file']);
        $this->sendFCMNotification($notification->title,$notification->description, $notification->user_id,$send);
        return $request;
    }

    public function updateRequest($id, $data)
    {
        $request = $this->find($id);
        $maid = Maid::find($request->maid_id);
        $notification = Notification::create([
            'user_id' => $request->user_id,
            'order_id' => $request->order_id,
            "type" => NotificationActionEnum::OrderStatus->value,
            'title' => [
                'en' => __('notifications.Asus Al Injaz',[],'en'),
                'ar' => __('notifications.Asus Al Injaz',[],'ar'),
            ],
            'description' => [
                'en' => $data['status'] == 'accept' ? __('notifications.return_request_accepted',[],'en') : __('notifications.return_request_refused',[],'en') ,
                'ar' => $data['status'] == 'accept' ? __('notifications.return_request_accepted',[],'ar') :  __('notifications.return_request_refused',[],'ar'),
            ],
        ]);
        $send = [
            "type" => $notification->type,
            "order_id" => $notification->order_id,
        ];
        if($data['status'] == 'accept'){
            $maid->available = 1;
            $maid->available_at = Carbon::now();
            $maid->save();
        }
        $this->sendFCMNotification($notification->title,$notification->description, $notification->user_id,$send);
        return $request->update($data);
    }
}
